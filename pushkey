#!/usr/bin/env perl

#v1.2 - converted to perl added switches

use warnings;
use strict;

#use Data::Dumper;
use Getopt::Long;

sub note {
my $heredoc = <<END;

usage: pushkey [destination] [-i /path/identityfile] [-p port]

examples: 
	pushkey 192.168.0.1
	pushkey al\@myfqdn.com
	pushkey fqdn.com -i /path/id_key.pub
	pushkey 192.168.0.1 -i /path/file -p 80
	pushkey myfqdn -p 80

If you dont specify the identityfile then it will try \$HOME/.ssh/id_dsa.pub, else id_rsa.pub


END
print $heredoc; 
exit;
}


exists $ARGV[0] or note ();


my $REM_HOST=$ARGV[0];
my $KEY="";
my $PORT=22;
my $DIR="$ENV{HOME}/.ssh";
my $VAL="";


GetOptions( 'i=s' => \$KEY
           ,'p:i' => \$PORT
           ,'h|?|help' => \&note
          );


sub pushkey {
	open (MYFILE, $KEY) or die "Failed to read identiy file!\n";
	while (<MYFILE>) {
	   	chomp;
		$VAL=$_;
	}
	close (MYFILE); 
	`ssh -p $PORT $REM_HOST "umask 077; test -d .ssh || mkdir .ssh; chmod 700 .ssh ; echo $VAL >> .ssh/authorized_keys; chmod 600 .ssh/*" || exit 2`;
	print "Cheers! Now go verify remote host is set up correctly.\n";
}

sub create_keys {
        print "No public keys found... Do you want rsa or dsa keys? If your not sure, choose RSA.\n";

        my $read=lc(<STDIN>);
        chomp($read);
        if ($read eq "rsa") {
                qx/ssh-keygen/;
                $KEY="$DIR/id_rsa.pub";
                pushkey ();
        } elsif ($read eq "dsa") {
                qx/ssh-keygen -t dsa/;
                $KEY="$DIR/id_dsa.pub";
                pushkey ();
        } else {
                        print "*** You didnt specify dsa or rsa ***\n";
			exit 3;
        }
}

if ( $KEY ne "") {
	if ( -e $KEY ) {
		pushkey ();
	} else {
		print "The identity file path you specified failed.\n", "Does it actually exist? Possibly a permissions issue? I dunno.\n"
	}

} elsif (-e "$DIR/id_dsa.pub") {
	$KEY="$DIR/id_dsa.pub";
	pushkey ();
} elsif (-e "$DIR/id_rsa.pub") {
	$KEY="$DIR/id_rsa.pub";
	pushkey ();
} else {
	create_keys ();
}

